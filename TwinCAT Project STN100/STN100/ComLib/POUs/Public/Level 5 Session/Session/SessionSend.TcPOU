<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="SessionSend" Id="{83486ecd-3f97-4ef6-bd8d-72e2bd3c3ecd}" SpecialFunc="None">
    <Declaration><![CDATA[{library PUBLIC}
(*
Use this function block to send DataGram to a equipment.
To send a Session must exist, use SessionInit to create a session.
*)
FUNCTION_BLOCK SessionSend
VAR_INPUT
	En:				BOOL;						(* Set to true to send a data gram *)
	SessionID: 		INT;					 	(* A  valid session ID number generated by SessionInit *)
	FunctionType:	BYTE;						(* Function type ASYNC or SYNC *)
	FunctionNumber:	BYTE;						(* Function number *)
	ParameterDW:	DWORD;						(* DWORD parameter value *)
	ParameterB:		BYTE;						(* Byte parameter value *)
END_VAR
VAR_OUTPUT
	Done: 				BOOL:=FALSE;			(* If true, the command is transmitted ok, to reset set En to false *)
	Executing:			BOOL:=FALSE;			(* True while the command in transmitted *)
	Waiting:			BOOL:=FALSE;			(* True if the command is queued to be transmitted *)
	Error: 				BOOL := FALSE;			(* True if an error occured *)
	Answer:	 			DataGram;				(* Answer from send *)
	BytesLeft:			INT;					(* Number of bytes left to send *)
END_VAR
VAR_IN_OUT
	Data: 				CommunicationData;		(* Common data structure to connect this function block to a specific Communicator block *)
END_VAR
VAR
	Sequence:		INT:=0;
	MySession:	INT:=-1;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF  En THEN
	IF  SessionID=Data._Session._SessionID AND SessionID<>-1 AND Data._Session._Locked THEN
		CASE Sequence OF
			0:	(* Wait until ready *)
				Waiting:=TRUE;
				BytesLeft:=_DataGramSize();
				IF Data._Status=DATAGRAM_SEQUENCE.DATAGRAM_SEQUENCE_NOP AND NOT Data._Session._SessionBussy THEN
					Waiting:=FALSE;
					Data._Session._SessionBussy:=TRUE;
					Sequence:=Sequence+1;
				END_IF;

			1:	(* Copy data to send buffer *)
				Data._Data.FunctionType:=FunctionType;
				Data._Data.FunctionNumber:=FunctionNumber;
				Data._Data.ParameterDW:=ParameterDW;
				Data._Data.ParameterB:=ParameterB;

				MySession:=Data._Session._SessionCounter;
				Data._DataExecute:= Data._DataCounter+INT_TO_UDINT(_DataGramSize());
				BytesLeft:=_DataGramSize();
				Executing:=TRUE;
				Sequence:=Sequence+1;

			2:	(* Wait until all data send *)
 				BytesLeft:=UDINT_TO_INT(Data._DataExecute-Data._DataCounter);

				IF Data._Error THEN
					Data._Session._SessionBussy:=FALSE;
					Error:=TRUE;
					Sequence:=Sequence+1;
				ELSIF Data._Session._SessionCounter<>MySession THEN
					Data._Session._SessionBussy:=FALSE;
					Answer:=Data._DataAnswer;
					Done:=TRUE;
					Sequence:=Sequence+1;
				END_IF;

			3:
				Waiting:=FALSE;
				Executing:=FALSE;
		END_CASE;
	ELSE
		Waiting:=FALSE;
		Executing:=FALSE;
		Sequence:=0;
	END_IF;
ELSE
	Done:=FALSE;
	Waiting:=FALSE;
	Executing:=FALSE;
	Error:=FALSE;
	BytesLeft:=0;
	Sequence:=0;
END_IF;]]></ST>
    </Implementation>
    <LineIds Name="SessionSend">
      <LineId Id="38" Count="53" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>